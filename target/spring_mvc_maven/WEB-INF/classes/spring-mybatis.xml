<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.0.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/task
		http://www.springframework.org/schema/task/spring-task-4.0.xsd">
	<!-- 自动扫描 -->
	<context:component-scan base-package="com.zhht" />
	<!-- 引入配置文件 -->
	<bean id="myConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:err-code.properties</value>
				<value>classpath:redis-config.properties</value>
				<value>classpath:log4j.properties</value>
			</list>
		</property>
		<property name="ignoreUnresolvablePlaceholders" value="true" />
	</bean>
	<import resource="spring-redis.xml" />

	<!-- 配置Druid 性能比c3p0要好 -->
	<!-- <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" 
		destroy-method="close"> 驱动 <property name="driverClassName" value="${driver}" 
		/> <property name="url" value="${url}" /> <property name="username" value="${username}" 
		/> <property name="password" value="${password}" /> 初始化连接大小 <property name="initialSize" 
		value="${initialSize}"></property> 连接池最大数量 <property name="maxActive" value="${maxActive}"></property> 
		连接池最大空闲 <property name="maxIdle" value="${maxIdle}"></property> 连接池最小空闲 <property 
		name="minIdle" value="${minIdle}"></property> 获取连接最大等待时间 <property name="maxWait" 
		value="${maxWait}"></property> </bean> -->
	<!-- Hikari Datasource -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"
		destroy-method="shutdown">
		<property name="driverClassName" value="${driver}" />
		<property name="jdbcUrl" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<!-- <property name="connectionTestQuery" value="SELECT 1" /> -->
		<!-- 连接只读数据库时配置为true， 保证安全 -->
		<property name="readOnly" value="false" />
		<!-- 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 -->
		<property name="connectionTimeout" value="30000" />
		<!-- 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 -->
		<property name="idleTimeout" value="600000" />
		<!-- 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL 
			wait_timeout参数（show variables like '%timeout%';） -->
		<property name="maxLifetime" value="1800000" />
		<!-- 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count) -->
		<property name="maximumPoolSize" value="20" />
	</bean>
	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.zhht.test.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 注解式开发 @Transation -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->

	<!-- 引入同文件夹下的redis属性配置文件 -->
	<!-- <import resource="redis.xml"/> -->
</beans>